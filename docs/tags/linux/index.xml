<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Djalal Harouni</title>
    <link>https://djalal.opendz.org/tags/linux/</link>
    <description>Recent content in linux on Djalal Harouni</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2021, Djalal Harouni; all rights reserved.</copyright>
    <lastBuildDate>Fri, 11 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://djalal.opendz.org/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kernel Image Lockdown and eBPF Flexibility!</title>
      <link>https://djalal.opendz.org/post/ebpf-kernel-image-lockdown-and-ebpf-flexibility/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://djalal.opendz.org/post/ebpf-kernel-image-lockdown-and-ebpf-flexibility/</guid>
      <description>
        
          
            The Kernel Lockdown feature that was merged in Linux 5.4 is designed to prevent both direct and indirect access to a running kernel image, attempting to protect against unauthorized modification of the kernel image and to prevent access to security and cryptographic data located in kernel memory, whilst still permitting driver modules to be loaded.
  Introduction  In his post Linux kernel lockdown, integrity, and confidentiality Matthew Garrett first explains that it took around 7 years journey to get the lockdown patches merged!
          
          
        
      </description>
    </item>
    
    <item>
      <title>eBPF: Block Linux Fileless Payload &#34;Malware&#34; Execution with BPF LSM</title>
      <link>https://djalal.opendz.org/post/ebpf-block-linux-fileless-payload-execution-with-bpf-lsm/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://djalal.opendz.org/post/ebpf-block-linux-fileless-payload-execution-with-bpf-lsm/</guid>
      <description>
        
          
            Due to the security features that Linux offers, like booting directly into a readonly filesystem, making filesystems readonly at runtime for apps and containers, some attacks have been using what is known as &amp;quot;fileless binary execution&amp;quot; to avoid such protections, and gain the ability to execute binaries directly from the memory without touching or leaving traces on the disk.
 From Wikipedia &amp;quot;Fileless malware is a variant of computer related malicious software that exists exclusively as a computer memory-based artifact i.
          
          
        
      </description>
    </item>
    
    <item>
      <title>eBPF Summit 2021 - Talk: BPF to bridge Cloud and IoT Linux Security</title>
      <link>https://djalal.opendz.org/post/ebpf-summit-2021-talk/</link>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://djalal.opendz.org/post/ebpf-summit-2021-talk/</guid>
      <description>
        
          
            At the eBPF Summit 2021, I gave a talk about how to take advantage of eBPF to try to bridge some cloud and IoT security features.
 My Talk can be found here: BPF to bridge Cloud and IoT Linux Security on youtube
All eBPF Summit 2021 here: eBPF Summit 2021 Youtube Channel
          
          
        
      </description>
    </item>
    
    <item>
      <title>DZ Open Source contributions into space Mars 2020 Helicopter, Ingenuity</title>
      <link>https://djalal.opendz.org/post/dz-code-mars-2020-helicopter-contributor/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://djalal.opendz.org/post/dz-code-mars-2020-helicopter-contributor/</guid>
      <description>
        
          
            &lt;p&gt;Some friends pinged me about a GitHub post that lists Open Source projects used into space, more precisely within the &lt;a href=&#34;https://www.jpl.nasa.gov/missions/ingenuity&#34;&gt;Mars ingenuity mission&lt;/a&gt;. The Github post is here: &lt;a href=&#34;https://github.blog/2021-04-19-open-source-goes-to-mars/&#34;&gt;Open source goes to Mars&lt;/a&gt;&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>All systems go Conference - Modern deployment for Embedded Linux and IoT Talk</title>
      <link>https://djalal.opendz.org/post/modern-deployment-for-embedded-linux-and-iot/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://djalal.opendz.org/post/modern-deployment-for-embedded-linux-and-iot/</guid>
      <description>
        
          
            The Userspace Linux Conference All Systems Go! 2017 videos and talks are now available online.
My talk &amp;quot;Modern Deployment for Embedded Linux and IoT&amp;quot; is available here:
Video - Slides
All video talks are here
          
          
        
      </description>
    </item>
    
    <item>
      <title>Modernization of Linux proc filesystem and containers security</title>
      <link>https://djalal.opendz.org/post/linux-kernel-private-proc-instances-per-pidns/</link>
      <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://djalal.opendz.org/post/linux-kernel-private-proc-instances-per-pidns/</guid>
      <description>
        
          
            TL;DR: The Linux kernel procfs suffers from a historical design that prevents having multiple separate procfs instances inside the same PID namespace. All the mounts are a mirror of the internal one. This blocks developement of Linux containers, sandboxes, and other security related features.
Patch solution: PATCH RFC v3 proc: modernize proc to support multiple private instances
Problem Linux containers and other sandbox mechanisms want to hide processes, files and directories of procfs, other implementations want to restrict some procfs features.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux kernel improve Module autoloading infrastructure</title>
      <link>https://djalal.opendz.org/post/linux-kernel-improve-module-autoloading-infrastructure/</link>
      <pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://djalal.opendz.org/post/linux-kernel-improve-module-autoloading-infrastructure/</guid>
      <description>
        
          
            TL;DR: Currently, an explicit call to load or unload kernel modules require CAP_SYS_MODULE capability. However unprivileged users have always been able to load some modules using the implicit auto-load operation. An automatic module loading happens when programs request a kernel feature from a module that is not loaded. In order to satisfy userspace, the kernel then automatically load all these required modules, however attackers have been abusing this functionality to load vulnerable modules.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Hardening Linux-based IoT systems</title>
      <link>https://djalal.opendz.org/post/hardening-linux-based-iot-systems/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://djalal.opendz.org/post/hardening-linux-based-iot-systems/</guid>
      <description>
        
          
            &lt;p&gt;TL;DR: In Linux kernel and as part of the Kernel Self Protection Project we are pushing for new lightweight security mechanisms. On top of that, in systemd we are implementing new lightweight container mechanisms that target Embedded Linux and IoT. Our goal is to make it easy to deploy Secure Embedded Linux and IoT systems.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>systemd Sandbox or systemd Lightweight Containers</title>
      <link>https://djalal.opendz.org/post/systemd-sandbox-or-systemd-lightweight-containers/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://djalal.opendz.org/post/systemd-sandbox-or-systemd-lightweight-containers/</guid>
      <description>
        
          
            Sandboxing IoT Apps using lightweight containers is an important step for Linux-IoT based devices, it allows to reduce the exposure from mis-configuration, bugs, or vulnerability exploitation.
 As a simple example the BrickerBot and similar worms did not use complex 0day exploits. They used simple attack vectors like unprotected remote shells accounts and according to internet resources, lot of IoT devices were affected. The straightforward solution in this case should be a firewall solution plus a powerful sandbox mechanism for apps.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux kernel - /proc/pid/environ fixes</title>
      <link>https://djalal.opendz.org/post/linux-kernel-proc-pid-envrion-fixes/</link>
      <pubDate>Fri, 17 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://djalal.opendz.org/post/linux-kernel-proc-pid-envrion-fixes/</guid>
      <description>
        
          
            Just to share that Linux /proc/pid/environ suffers from bugs referenced and fixed here: proc: /proc//environ offset fixes that can be considered vulnerabilities.
The fixes are in the mainline now. The PoC to dump exec area can found here: http://lkml.org/lkml/2012/7/22/163
Linux Procfs suffers from other vulnerabilities, like the:
 -open() + -dup(stdin,stdout…) + execve(suid_program)…  These were discussed several times on lkml. If you want a quick nice fix, that only compares u64bit values, check the recent Grsecurity patches.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
